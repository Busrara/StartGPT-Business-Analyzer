# -*- coding: utf-8 -*-
"""Copy of Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16eGtPHG9VIfC7J2-Y6o4dXGIwdJXiuBP
"""

import openai
from fpdf import FPDF
import matplotlib.pyplot as plt
import pandas as pd
import os
from datetime import datetime

# ======= CONFIGURATION =======
openai.api_key = "YOUR_API_KEY"  # Replace with your OpenAI paid key
MODEL = "gpt-4"  # You can change this to "gpt-3.5-turbo"
LOGO_PATH = None  # Set a path like "logo.png" if you'd like to include a logo

# ======= PROMPT GENERATOR =======
def generate_prompts(idea):
    return {
        "Value Proposition": f"Write a clear value proposition for this business idea:\n\n{idea}",
        "Customer Segments": f"Identify the key customer segments for the business idea:\n\n{idea}",
        "SWOT Analysis": f"Provide a SWOT analysis (Strengths, Weaknesses, Opportunities, Threats) for:\n\n{idea}",
        "Competitor Analysis": f"List potential competitors and compare their strengths/weaknesses with the business idea:\n\n{idea}",
    }

# ======= GPT CALLER =======
def ask_gpt(prompt):
    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response['choices'][0]['message']['content'].strip()

# ======= SCORE ANALYZER (Simple Heuristic) =======
def score_idea(analysis):
    score = 0
    score += 1 if "unique" in analysis["Value Proposition"].lower() else 0
    score += 1 if "broad" in analysis["Customer Segments"].lower() else 0
    score += 1 if "few competitors" in analysis["Competitor Analysis"].lower() else 0
    score += 1 if "opportunity" in analysis["SWOT Analysis"].lower() else 0
    return score

# ======= PDF REPORTER =======
class PDFReport(FPDF):
    def header(self):
        if LOGO_PATH and os.path.exists(LOGO_PATH):
            self.image(LOGO_PATH, 10, 8, 20)
        self.set_font('Arial', 'B', 14)
        self.cell(0, 10, 'Business Idea Report', ln=True, align='C')
        self.ln(10)

    def chapter_title(self, label):
        self.set_font('Arial', 'B', 12)
        self.set_text_color(0, 102, 204)
        self.cell(0, 10, label, ln=True)
        self.set_text_color(0, 0, 0)

    def chapter_body(self, text):
        self.set_font('Arial', '', 11)
        self.multi_cell(0, 8, text)
        self.ln()

    def add_idea_analysis(self, title, analysis):
        self.chapter_title(f"Idea: {title}")
        for key, value in analysis.items():
            self.chapter_title(f"  {key}")
            self.chapter_body(value)

    def add_comparison_chart(self, idea_scores):
        plt.figure(figsize=(6,4))
        names = list(idea_scores.keys())
        scores = list(idea_scores.values())
        plt.barh(names, scores, color='skyblue')
        plt.title("Idea Comparison Score")
        plt.xlabel("Score (out of 4)")
        plt.tight_layout()
        chart_path = "chart.png"
        plt.savefig(chart_path)
        plt.close()
        self.add_page()
        self.image(chart_path, x=30, y=40, w=150)
        os.remove(chart_path)

# ======= MAIN WORKFLOW =======
def analyze_ideas(ideas):
    results = {}
    idea_scores = {}

    for idea in ideas:
        prompts = generate_prompts(idea)
        analysis = {}
        for key, prompt in prompts.items():
            print(f"⏳ Generating {key} for: {idea[:30]}...")
            analysis[key] = ask_gpt(prompt)
        score = score_idea(analysis)
        results[idea] = analysis
        idea_scores[idea] = score

    return results, idea_scores

def export_to_pdf(results, idea_scores, filename="business_ideas_report.pdf"):
    pdf = PDFReport()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "Multi-Business Idea Analyzer", ln=True, align="C")
    pdf.set_font("Arial", "", 12)
    pdf.ln(5)
    pdf.cell(0, 10, f"Generated on {datetime.now().strftime('%Y-%m-%d %H:%M')}", ln=True)
    pdf.ln(10)

    for idea, analysis in results.items():
        pdf.add_idea_analysis(idea, analysis)
        pdf.add_page()

    pdf.add_comparison_chart(idea_scores)
    pdf.output(filename)
    print(f"✅ PDF saved as: {filename}")

# ======= SAMPLE USAGE =======
if __name__ == "__main__":
    business_ideas = [
        "An app that helps people swap home-cooked meals with neighbors.",
        "A marketplace for renting out solar-powered mobile workstations.",
        "An AI-based resume optimizer tailored for remote job applications."
    ]
    results, scores = analyze_ideas(business_ideas)
    export_to_pdf(results, scores)